// 1.4 행렬곱셈 ( 두 n X n 행렬의 곱을 구하시오. )
// Input : 정수 n (> 0) , 수의 2차원 배열 A, B. 행렬의 행과 열은 모두 1부터 n까지 인덱스를 붙임
// Output : A 와 B 행렬의 곱이 표현된 2차원 배열 C. 행렬의 행과 열은 모두 1부터 n까지 인덱스를 붙임
#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;
typedef vector<vector<int>> matrix_t;

void matrixmult(int n, matrix_t A, matrix_t B, matrix_t &C) // matrix_t A -> Call by Value , matrix_t& C -> Call by Reference
{
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
        {
            C[i][j] = 0;
            for (int k = 1; k <= n; k++)
                C[i][j] += A[i][k] * B[k][j];
        }
}

int main()
{
    int n;
    cin >> n;

    matrix_t A(n + 1, vector<int>(n + 1));
    matrix_t B(n + 1, vector<int>(n + 1));
    matrix_t C(n + 1, vector<int>(n + 1));
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            cin >> A[i][j];

    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= n; j++)
            cin >> B[i][j];

    matrixmult(n, A, B, C);

    for (int i = 1; i <= n; i++)
    {
        for (int j = 1; j <= n; j++)
            cout << C[i][j] << ' ';
        cout << endl;
    }

    return 0;
}
