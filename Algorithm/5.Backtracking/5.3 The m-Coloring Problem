// 5.3 The m-Coloring Problem : 비방향 그래프에서 m 개의 색만 사용하여 인접한 정점이 같은 색이 되지 않게 정점을 색칠할 수 있는 모든 방법으 구하시오.
// Input : 양의 정수 n,m , n 개의 정점을 가진 비방향 그래프 2차원 배열 W (행과 열의 인덱스는 모두 1 ~ n) , W[i][j] : i 번째 정점과 j 번째 정점 사이에 이음선이 존재하면 true, 없으면 false
// Output : 최대로 m 개의 색을 가지고 인접한 정점이 같은 색이 되지 않게 그래프에 색칠하는 가능한 모든 경우. vcolor (인덱스는 1 ~ n), vcolor[i] : i 번째 정저에 할당된 색 (1 ~ m 사이의 정수)

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

vector<int> vcolor;
vector<vector<int>> W;
int n, m;
bool promising(int i)
{
    int j = 1;
    bool flag = true;

    while (j < i && flag)
    {
        if (W[i][j] && vcolor[i] == vcolor[j])
            flag = false;
        j++;
    }
    return flag;
}

void m_coloring(int i)
{
    int color;
    if (promising(i))
    {
        if (i == n)
            for (int idx = 1; idx <= n; idx++)
                cout << vcolor[idx] << ' ';
        else
            for (color = 1; color <= m; color++)
            {
                vcolor[i + 1] = color;
                m_coloring(i + 1);
            }
    }
}
// m_coloring(0); 최초 호출
// m>=3 일 때, NP 문제
