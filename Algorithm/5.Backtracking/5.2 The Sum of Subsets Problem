// 5.2 The Sum-of-Subsets Problem : 합이 W 가 되는 모든 정수의 조합 구하기
// Input : 양의 정수 n , 오름차순 정렬된 양의 정수 배열 w (인덱스는 1 ~ n) , 양의 정수 W
// Output : 합이 W 가 되는 모든 정수 조합

#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

int W;
vector<int> w;
vector<bool> include;

bool promising(int i, int weight, int total)  // weight : 수준 i 의 마디까지 포함된 무게의 합
{
    return (weight + total >= W) && (weight == W || weight + w[i + 1] <= W);
   // 현재 담은 아이템의 무게 weight 와 남은 아이템의 무게 total 을 더했을 때 W 보다 작지 않은지(조건 1)
   // weight 가 W 와 같은지 (조건2)
   // weight 와 다음 아이템의 무게 w[i+1]을 더했을 때 W 보다 작거나 같은지 (조건 3) - 조건 2 때문에 i = n 일 때는 고려하지 않아도 됨
}

void sum_of_subsets(int i, int weight, int total)
{
    if (promising(i, weight, total))
    {
        if (weight == W)
            for (int j = 1; j <= i; j++)
                cout << include[j] << ' ';
        else
        {
            include[i + 1] = true; // w[i+1] 을 포함
            sum_of_subsets(i + 1, weight + w[i + 1], total - w[i + 1]);
            include[i + 1] = false; // w[i+1] 을 포함하지 않음
            sum_of_subsets(i + 1, weight, total - w[i + 1]);
        }
    }
}
// sum_of_subsets(0,0,total); 최초 호출 , total : 남은 아이템의 총 무게
