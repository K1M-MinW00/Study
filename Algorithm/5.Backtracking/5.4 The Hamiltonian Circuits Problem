// 5.4 The Hamiltonian Circuits Problem : 연결된 비방향 그래프에서 해밀튼 회로를 모두 구하시오.
// Input : 양의 정수 n , 정점이 n 개인 비방향 그래프 2차원 배열 W (행과 열의 인덱스는 1 ~ n), W[i][j] : i 번째 정점과 j 번째 정점을 잇는 이음선이 있으면 true, 없으면 false
// Output : 해밀튼 회로 배열 vindex (인덱스는 0 ~ n - 1) , vindex[i] : 경로상에서 i 번째 정점의 인덱스 (출발 정점의 인덱스는 vindex[0])
// 해밀튼 회로 : 주어진 정점에서 출발하여 그래프상의 각 정점을 정확히 한 번씩 방문하고, 출발 정점으로 돌아오는 모든 경로

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;
vector<vector<int>> W;
vector<int> vindex;
int n, m;

bool promising(int i)
{
    int j;
    bool flag;

    if (i == n - 1 && !W[vindex[n - 1]][vindex[0]]) // 첫번째 정점과 마지막 정점 인접한지
        flag = false;
    else if (i > 0 && !W[vindex[i - 1]][vindex[i]]) // i번째 정점은 i-1번째 정점과 인접한지
        flag = false;
    else
    {
        flag = true;
        j = 1;
        while (j < i && flag)
        {
            if (vindex[i] == vindex[j]) // 한 번 방문했는데 또 방문했을 때
                flag = false;
            j++;
        }
    }
    return flag;
}

void hamiltonian(int i)
{
    int j;

    if (promising(i))
    {
        if (i == n - 1)
            for (int idx = 0; idx <= n - 1; idx++)
                cout << vindex[idx] << " ";
        else
            for (j = 2; j <= n; j++) // 모든 정점의 다음 정점을 시도
            {
                vindex[i + 1] = j;
                hamiltonian(i + 1);
            }
    }
}

// vindex[0]=1; hamiltonain(0); 최초 호출
