// 4.2 Dijkstra's Algorithm for Single-Source Shortest Paths (가중치포함 방향그래프에서 v_1 에서 다른 모든 마디로 가는 최단경로를 구하시오.)
// Input : 정수 n (>=2) , 마디가 n 개 있는 연결된 가중치포함 방향그래프를 표현한 2차원 배열 W (행과 열의 인덱스 1 ~ n) , W[i][j] : i번째 마디에서 j번째 마디를 잇는 이음선 상의 가중치
// Output : 최단경로 상에 놓여있는 이음선의 집합 F

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>
#define INF 999

typedef vector<vector<int>> matrix_t;
typedef vector<pair<int, int>> set_of_edges;

void dijkstra(int n, matrix_t &W, set_of_edges &F)
{
    int vnear, min;
    vector<int> touch(n + 1), length(n + 1);

    F.clear();

    for (int i = 2; i <= n; i++)
    {
        touch[i] = 1;        // v_1 에서 출발하는 현재 최단경로의 마지막 마디를 v_1 으로 초기화
        length[i] = W[1][i]; // 그 경로의 길이는 v_1 에서의 이음선 상의 가중치로 초기화
    }

    for (int k = 2; k <= n; k++)
    {
        min = INF;
        for (int i = 2; i <= n; i++) // 최단경로를 가지는지 각 마디를 점검
            if (0 <= length[i] && length[i] < min)
            {
                min = length[i];
                vnear = i;
            }
        F.push_back(make_pair(touch[vnear], vnear)); // touch[vnear] 가 인덱스인 마디에서 vnear 가 인덱스인 마디로 가는 이음선을 F 에 추가

        for (int i = 2; i <= n; i++)
            if (length[i] > length[vnear] + W[vnear][i])
            {
                length[i] = length[vnear] + W[vnear][i]; // Y에 속하지 않는 각 마디에 대해서, 최단경로를 바꿈
                touch[i] = vnear;                        // vnear 가 인덱스인 마디를 Y 에 추가
            }
        length[vnear] = -1;
    }
}
