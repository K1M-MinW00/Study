// 4.1-1 Prim's Algorithm : 가장 가까운 마디 중 최소 가중치를 가진 이음선으로 연결
// Input : 정수 n (>= 2) : 마디의 개수 , 가중치포함 비방향그래프 2차원 배열 W ( 행과 열의 인덱스 범위는 1 ~ n ) , W[i][j] : i번째 마디와 j번째 마디를 연결하는 이음선의 가중치
// Output : 그래프에 대한 최소비용 신장트리 안에 있는 이음선의 집합 F

#include <iostream>
#include <algorithm>
#include <vector>
#include <map>

using namespace std;

typedef vector<vector<int>> matrix_t;
typedef vector<pair<int, int>> set_of_edges;
typedef pair<int, int> edge_t;

#define INF 9999
void prim(int n, matrix_t &W, set_of_edges &F)
{
    int vnear, min;
    vector<int> nearest(n + 1), distance(n + 1);

    F.clear(); // F = { }

    for (int i = 2; i <= n; i++)
    {
        nearest[i] = 1; //  v_1 부터 시작
        distance[i] = W[1][i];
    }

    for (int k = 1; k < n; k++)
    {
        min = INF;
        for (int i = 2; i <= n; i++)
            if (0 <= distance[i] && distance[i] < min)
            {
                min = distance[i];
                vnear = i;
            }

        F.push_back(make_pair(vnear, nearest[vnear]));
        distance[vnear] = -1; // Y 집합에 추가한다는 의미

        for (int i = 2; i <= n; i++) // Y 에 속하지 않은 각 마디에 대하여 Y 로부터의 거리를 갱신
        {
            if (distance[i] > W[i][vnear])
            {
                distance[i] = W[i][vnear];
                nearest[i] = vnear;
            }
        }
    }
} // 시간 복잡도 : Theta(n^2) , n : 정점의 개수

// 4.1-2 Kruskal's Algorithm : 각 마디마다 자신만 포함하는 V의 서로소 부분집합들을 만들고 시작하여, 가중치가 작은 것부터 차례로 이음선 검사
// Input : 정수 n (>= 2) : 마디의 개수 , 양의 정수 m , n 개의 마디와 m 개의 이음선을 가진 연결된 가중치 포함 비방향 그래프 E
// Output : 그래프에 대한 최소비용 신장트리 안에 있는 이음선의 집합 F

typedef struct edge
{
    int u, v, w;
} edge_t2;

struct edge_compare
{
    bool operator()(edge_t2 e1, edge_t2 e2)
    {
        if (e1.w > e2.w)
            return true;
        else
            return false;
    }
};

typedef vector<edge_t2> set_of_edges2;
typedef priority_queue<edge_t2, vector<edge_t2>, edge_compare> PriorityQueue;
vector<int> dset;

void dset_init(int n)
{
    dset.resize(n + 1);
    for (int i = 1; i <= n; i++)
        dset[i] = 1;
}

int dset_find(int i)
{
    while (dset[i] != i)
        i = dset[i];
    return i;
}

void dset_merge(int p, int q)
{
    dset[p] = q;
}

void kruskal(int n, int m, set_of_edges2 &E, set_of_edges2 &F)
{
    int p, q;
    edge_t2 e;
    PriorityQueue PQ;

    for (edge_t2 e : E) // E 에 속한 m 개의 이음선을 오름차순으로 정렬
        PQ.push(e);

    F.clear();
    dset_init(n);

    while (F.size() < n - 1) // F 에 n-1 개의 이음선이 있을 때 while 루프 탈출
    {
        e = PQ.top(); // 아직 고려하지 않은 이음선 중 가중치가 최소인 이음선
        PQ.pop();
        p = dset_find(e.u);
        q = dset_find(e.v);
        if (p != q)
        {
            dset_merge(p, q);
            F.push_back(e); // e 를 F 에 추가
        }
    }
} //  시간복잡도 : Theta(n^2 * log n) , Theta(m * log m) , m : 간선의 개수, n : 정점의 개수
