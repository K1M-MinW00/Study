// 2.4 합병정렬 2 (n 개의 원소를 비내림차순으로 정렬)제자리정렬(in-place sort) : 입력을 저장하는데 필요한 장소 이외의 추가 저장소 사용 X
// Input : 양의 정수 n, 배열 S(인덱스는 1 ~ n)
// Output : 원소를 비내림차순으로 정렬한 배열 S

// 2.5 합병 2 (합병정렬 2에서 분할하여 정렬한 배열을 합병)
// Input : 인덱스 low, mid, high, 그리고 S 의 부분배열(인덱스는 low ~ high), low 에서 mid 까지 배열의 원소는 이미 정렬되어 있고, mid + 1 에서 high 까지 배열의 원소도 정렬되어 있음.
// Output : 원소가 비내림차순으로 정렬되어 있는 S 의 부분배열(인덱스는 low ~ high)

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;
vector<int> S;
int n;

void mergesort2(int low, int high)
{
    int mid;
    if (low < high)
    {
        mid = (low + high) / 2;
        mergesort2(low, mid);
        mergesort2(mid + 1, high);
        merge2(low, mid, high);
    }
}

void merge2(int low, int mid, int high)
{
    int i = low, j = mid + 1, k = 0;
    vector<int> U(high - low + 1);

    while (i <= mid && j <= high)
    {
        if (S[i] < S[j])
            U[k] = S[i++];
        else
            U[k] = S[j++];

        k++;
    }

    if (i > mid)
        while (j <= high)
            U[k++] = S[j++];
    else
        while (i <= mid)
            U[k++] = S[i++];

    for (int t = low; t <= high; t++)
        S[t] = U[t - low];
}


// In-place sort : 제자리 정렬 - 입력을 저장하는데 필요한 장소 이외의 추가적인 저장장소를 사용하지 않는 정렬 알고리즘
