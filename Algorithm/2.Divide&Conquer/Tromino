// 정사각형이 3개 붙어있는 것을 트로미노(tromino) 라고 한다. 가로와 세로로 m 개의 정사각형이 연결되어 있는 바둑판이 있고, 1칸은 X 표시가 되어 있다.
// 여기서 m 은 2 의 거듭제곱이라고 가정한다. 다음 조건을 만족하도록 트로미노를 바둑판에 채우고 싶다.
// - 바둑판 전체를 트로미노로 채워야 한다.
// - X 표시가 되어 있는 칸은 트로미노로 덮을 수 없다.
// - 트로미노는 겹쳐 놓을 수 없다.
// - 트로미노는 바둑 바깥으로 삐져나올 수 없다.
// 트로미토 타일의 번호는 트로미노를 놓은 순서로 정한다.

// Input : 양의 정수 n (n X n 은 보드의 바둑판의 크기이고, n 은 2 의 거듭제곱 수만 주어짐) , row , col ( 0 <= row , col <= n - 1)
// Output : 트로미노를 놓은 순서대로 타일에 번호를 부여한 보드를 출력한다. 구멍 타일의 번호는 0으로 한다.

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;
int cnt=0;

void place(vector<vector<int>> &m,int mr,int mc,int quad)
{
    cnt++;
    if(quad!=1) m[mr-1][mc-1]=cnt;
    if(quad!=2) m[mr-1][mc]=cnt;
    if(quad!=3) m[mr][mc-1]=cnt;
    if(quad!=4) m[mr][mc]=cnt;
}

void tromino(vector<vector<int>> &m,int sr,int sc, int n, int r,int c)
{
  
    if(n==1)
    {
        return;
    }
    else
    {
        int mr=sr+n/2; int mc=sc+n/2;
        int r1=mr-1;   int c1=mc-1;
        int r2=mr-1;   int c2=mc;
        int r3=mr;     int c3=mc-1;
        int r4=mr;     int c4=mc;

        if(r < mr && c < mc)
        {
            place(m,mr,mc,1);
            r1=r, c1=c;
        }
        else if(r<mr && c >= mc)
        {
            place(m,mr,mc,2);
            r2=r,c2=c;
        }
        else if (r>=mr && c < mc)
        {
            place(m,mr,mc,3);
            r3=r,c3=c;
        }    
        else if(r>=mr && c>=mc)
        {
            place(m,mr,mc,4);
            r4=r,c4=c;
        }

        tromino(m,sr,sc,n/2,r1,c1);
        tromino(m,sr,mc,n/2,r2,c2);
        tromino(m,mr,sc,n/2,r3,c3);
        tromino(m,mr,mc,n/2,r4,c4);
    }
}

int main()
{
    int n, r, c;
    cin >> n >> r >> c;

    vector<vector<int>> m(n,vector<int>(n,0));
    tromino(m,0,0,n,r,c);

    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n-1;j++)
            printf("%d ",m[i][j]);
        printf("%d\n",m[i][n-1]);    
    }

    return 0;
}

/* Ex)
Input : 4 0 0
Output :
0 2 3 3
2 2 1 3
4 1 1 5
4 4 5 5

Input : 8 4 4
Output:
 3   3   4   4   8   8   9   9
 3   2   2   4   8   7   7   9
 5   2   6   6  10  10   7  11
 5   5   6   1   1  10  11  11
13  13  14   1   0  18  19  19
13  12  14  14  18  18  17  19
15  12  12  16  20  17  17  21
15  15  16  16  20  20  21  21
*/
