// 7.3 Selection using the Median of the Medians : n 개 다른 키로 된 배열 S 에서 k-번째 작은 키를 찾으시오.
// Input : k <= n 인 양의 정수 n, k , 서로 다른 키의 배열 S (인덱스는 1 ~ n)
// Output : k-번째로 작은 키.

#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#define SWAP(x, y, z) ((z) = (x), (x) = (y), (y) = (z))

using namespace std;

int n;

int median(int S[], int first, int last)
{
    sort(S[first], S[last]);
    return S[(first + last) / 2];
}

void partition(int S[], int low, int high, int &pivot)
{
    int arraysize = high - low + 1;
    int r = (int)ceil((double)arraysize / 5);               // 배열의 크기를 5개씩 그룹화
    int i, j, mark, first, last, pivotitem, temp, T[r + 1]; // 그룹화된 배열의 중앙값을 T 에 저장할 예정

    for (i = 1; i <= r; i++)
    {
        first = low + 5 * i - 5;
        last = min(low + 5 * i - 1, low + arraysize - 1);
        T[i] = median(S, first, last); // 배열 S 를 원소의 개수가 5개인 그룹으로 나눠 각 중앙값을 T 에 저장
    }

    pivotitem = select(r, T, (r + 1) / 2); // T 배열의 중앙값을 pivotitem 에 저장
    j = low;

    for (int i = low; i <= high; i++)
    {
        if (S[i] == pivotitem) // 중앙값과 같은 경우
        {
            SWAP(S[i], S[j], temp);
            mark = j++;
        }
        else if (S[i] < pivotitem) // 중앙값 보다 작은 경우
            SWAP(S[i], S[j++], temp);
    }

    pivot = j - 1;
    SWAP(S[mark], S[pivot], temp); // 작은 그룹의 마지막 원소와 중앙값을 교환
}

int selection(int S[], int low, int high, int k)
{
    int pivotpoint;

    if (low == high)
        return S[low];
    else
    {
        partition(S, low, high, pivotpoint);
        if (k == pivotpoint)
            return S[pivotpoint];
        else if (k < pivotpoint)
            return selection(S, low, pivotpoint - 1, k);
        else
            return selection(S, pivotpoint + 1, high, k);
    }
}

int select(int n, int S[], int k)
{
    return selection(S, 1, n, k);
}// select(n,S,k); 최초 호출 , 시간복잡도 : Theta(n)
