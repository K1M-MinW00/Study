// 7.1-1 Find the Largest Key : 크기가 n 인 배열 S 에서 최대키를 찾으시오.
// Input : 양의 정수 n, 배열 S (인덱스는 1 ~ n)
// Output : S 에서 최대키의 값을 가진 변수 large

#include <iostream>
#include <vector>

using namespace std;

void find_largest(int n, vector<int> S, int& large)
{
    large = S[1];
    for(int i=2;i<=n;i++)
      if(S[i] > large)
        large = S[i];
}// T(n) = n - 1

// 7.1-2 : Find the Largest Key and the Smallest Key : 크기가 n 인 배열 S 에서 최대키외 최소키를 찾으시오.
// Input : 양의 정수 n, 배열 S (인덱스는 1 ~ n)
// Output : S 에서 최대키의 값을 가진 변수 large, 최소키를 가진 변수 small

void find_both(int n, vector<int> S, int& large, int& small)
{
    large = S[1];
    small = S[1];
    for(int i=2;i<=n;i++)
      if(S[i] < small)
        small = S[i];
      else if(S[i] > large)
        large = S[i];
}// T(n) = 2 * (n - 1)

// 7.1-3 : Find minimum and maximum Keys by pairing keys :  크기가 n 인 배열 S 에서 최대키와 최소키를 찾으시오.
// Input : 양의 정수이며 짝수인 n, 배열 S (인덱스는 1 ~ n)
// Output : S 에서 최대키의 값을 가진 변수 large, 최소키를 가진 변수 small

void find_both_by_pairing(int n, vector<int> S, int& large, int& small)
{
  if(S[1] < S[2])
  {
    small = S[1]; large = S[2];
  }
  else
  {
    small = S[2]; large = S[1];
  }

  for(int i = 3;i <= n - 1; i += 2)
  {
    if(S[i] < S[i + 1])
    {
      if(S[i] < small) small = S[i];
      if(S[i + 1] > large) large = S[i + 1];
    }
    else
    {
      if(S[i + 1] < small) small = S[i + 1];
      if(S[i] > large) large = S[i];
    }
  }
} // T(n) = 3*n/2 - 2 (for n is even) , T(n) = 3*n/2 - 3/2 (for n is odd)
