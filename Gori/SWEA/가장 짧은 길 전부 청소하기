// 문제 : https://swexpertacademy.com/main/code/codeBattle/problemDetail.do?contestProbId=AWH998YaEa0DFAUG&categoryId=AYzyEMha298DFASg&categoryType=BATTLE&battleMainPageIndex=2

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int N;

vector<vector<pair<int,long>>> A;

struct compare{
    bool operator()(const pair<long long,int>& a, const pair<long long,int> &b)
    {
        return a.first > b.first; // 거리 기준 오름차순 정렬
    }
};

void dijkstra()
{
    priority_queue<pair<long long,int>,vector<pair<long long, int>>, compare> pq; // {거리, 건물}

    vector<long long> dist(N+1,LLONG_MAX); // 건물까지 가는 최소 거리
    dist[1] = 0;
    
    
    pq.push({0,1});

    while(!pq.empty())
    {
        long long cur_dist = pq.top().first;
        int cur = pq.top().second;
        pq.pop();

        if(cur_dist != dist[cur]) continue;

        for(int i=0;i<A[cur].size();++i)
        {
            long long next_dist = cur_dist + A[cur][i].second;
            int next = A[cur][i].first;

            if(next_dist < dist[next])
            {
                dist[next] = next_dist;
                pq.push({next_dist,next});
            }
        }
    }

   

    //cout << total;
}
int main()
{
    int T;
    cin >> T;

    for(int test_case = 1;test_case<=T;++test_case)
    {
        int M;
        cin >> N >> M;
        A.resize(N+1);

        for(int i=1;i<=M;i++)
        {
            int u,v;
            long long w;
            cin >> u >> v >> w;
            
            A[u].push_back({v,w});
            A[v].push_back({u,w});
        }

        cout << '#' << test_case << ' ';
        dijkstra();
        cout << endl;
    }

    return 0;
}
