// 문제 : https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AXdHxTNqC2IDFAS5

#include <iostream>
#include <vector>
using namespace std;

int main()
{
    int T;
    cin >> T;

    for (int test_case = 1; test_case <= T; test_case++)
    {
        int N;
        long long M, temp, max = 0;
        cin >> N >> M;
        vector<long long> A;
        
        for (int i = 0; i < N; i++)
        {
            cin >> temp;
            A.push_back(temp);
            if (max < temp)
                max = temp;
        }

        long long left = 1, right = max; // 가장 개수가 많은 사탕을 가방 하나에 한개씩 넣는 경우가 가능한 최대 경우
        long long answer = 0;

        while (left <= right)
        {
            long long mid = left + ((right - left) / 2);
            long long sum = 0;                           // 가방 하나에 들어가는 사탕 수
            for (int i = 0; i < A.size(); i++)
                sum += A[i] / mid; // 사탕 종류마다 넣을 수 있는 최대 개수만큼

            if (sum >= M) // 가방에 채워야하는 사탕 개수 M 를 만족했으므로, 정답으로 기록해두고, 가방을 늘려서 시도
            {
                answer = mid;
				        left = mid + 1;
            }
            
            else if (sum < M) // 가방 하나에 사탕을 더 담아야하므로, 가방을 줄이기
                right = mid - 1;
        }

        cout << '#' << test_case << ' ' << answer << endl;
    }
}
