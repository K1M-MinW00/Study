// 문제 : https://swexpertacademy.com/main/learn/course/lectureProblemViewer.do
#include <iostream>
#include <string>
#include <vector>
using namespace std;

vector<int> getPartialMatch(string &s)
{
    int m = s.length();
    vector<int> ps(m, 0);

    int idx = 1, matched = 0;

    while (idx + matched < m) // 탐색 문자열 자기 자신을 매칭
    {
        if (s[idx + matched] == s[matched])
        {
            ++matched;
            ps[idx + matched - 1] = matched; // 매칭을 진행하며 접두 접미사 배열 갱신
        }
        else
        {
            if (matched == 0)
                idx++;
            else // 불일치 발생 시 매칭을 진행하며 구했던 접두 접미사 길이만큼 탐색을 뛰어넘을 수 있음
            {
                idx += matched - ps[matched - 1];
                matched = ps[matched - 1];
            }
        }
    }
    return ps;
}

int KMP(string &str, string &s)
{
    int n = str.length(), m = s.length();
    vector<int> ps = getPartialMatch(s);
    int idx = 0, matched = 0, cnt = 0;

    while (idx <= n - m)
    {
        if (matched < m && str[idx + matched] == s[matched])
        { // 일치하는 경우
            ++matched;
            if (matched == m)
                cnt++;
        }

        else
        {                     // 불일치 하는 경우
            if (matched == 0) // 완전 불일치 : 뛰어넘는 칸 없이 다음 인덱스부터 확인
                ++idx;
            else
            {                                     // 접두 접미사 존재
                idx += matched - ps[matched - 1]; // 일치했던 접두 접미사 길이만큼 생략 가능
                matched = ps[matched - 1];        // 마지막으로 일치한 인덱스
            }
        }
    }
    return cnt;
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int T;
    cin >> T;
    string str, s;

    for (register int test_case = 1; test_case <= T; ++test_case)
    {
        cin >> str >> s;
        cout << '#' << test_case << ' ' << KMP(str, s) << endl;
    }
    return 0;
}
