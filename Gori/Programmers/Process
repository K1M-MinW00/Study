/*
1. 실행 대기 큐(Queue)에서 대기중인 프로세스 하나를 꺼냅니다.
2. 큐에 대기중인 프로세스 중 우선순위가 더 높은 프로세스가 있다면 방금 꺼낸 프로세스를 다시 큐에 넣습니다.
3. 만약 그런 프로세스가 없다면 방금 꺼낸 프로세스를 실행합니다.
3-1. 한 번 실행한 프로세스는 다시 큐에 넣지 않고 그대로 종료됩니다.

예를 들어 프로세스 4개 [A, B, C, D]가 순서대로 실행 대기 큐에 들어있고,
우선순위가 [2, 1, 3, 2]라면 [C, D, A, B] 순으로 실행하게 됩니다.

현재 실행 대기 큐(Queue)에 있는 프로세스의 중요도가 순서대로 담긴 배열 priorities와,
몇 번째로 실행되는지 알고싶은 프로세스의 위치를 알려주는 location이 매개변수로 주어질 때,
해당 프로세스가 몇 번째로 실행되는지 return 하도록 solution 함수를 작성해주세요.
*/
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <queue>

using namespace std;

int solution(vector<int> priorities, int location) {
    int answer = 0;

    queue<pair<int,int>> q;
    priority_queue<int> pq;

    for(int i=0;i<priorities.size();i++)
    {
        q.push(make_pair(priorities[i],i)); // idx , priority
        pq.push(priorities[i]); // 우선 순위 큐
    }
    
    while(!q.empty())
    {
       if(q.front().first == pq.top()) // queue 의 맨 앞 원소의 우선순위가 제일 클 때 
       {
            answer++;
            if(q.front().second == location) break; // 찾고자 하는 location 과 idx 가 같을 때까지 반복
            q.pop(); // queue 의 맨 앞 원소를 삭제
            pq.pop(); // pq 의 맨 앞 원소를 삭제
       }
        else // queue 의 맨 앞 원소보다 pq 안의 우선 순위 큐 중 더 큰 원소가 있을 때
        {
            q.push(q.front()); // queue 의 맨 앞 원소를 맨 뒤에 넣고
            q.pop(); // 맨 앞 원소를 삭제
        }
    } 
    return answer;
}
// 출처: 프로그래머스 코딩 테스트 연습, https://school.programmers.co.kr/learn/challenges
