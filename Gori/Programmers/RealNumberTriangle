/*
삼각형의 꼭대기에서 바닥까지 이어지는 경로 중, 거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다. 
아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다. 예를 들어 3에서는 그 아래칸의 8 또는 1로만 이동이 가능합니다.

삼각형의 정보가 담긴 배열 triangle이 매개변수로 주어질 때, 거쳐간 숫자의 최댓값을 return 하도록 solution 함수를 완성하세요.

제한사항
삼각형의 높이는 1 이상 500 이하입니다.
삼각형을 이루고 있는 숫자는 0 이상 9,999 이하의 정수입니다.
*/

#include <string>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

int solution(vector<vector<int>> triangle) {
    int answer = 0;
    int n = triangle.size();

    vector<vector<int>> dp(n);

    for(int i=0;i<n;i++)
    {
        dp[i].resize(i+1);
        for(int j=0;j<=i;j++)
            dp[i][j] = triangle[i][j];
    }

    for(int i=n-2;i>=0;i--) // 밑에서부터 올라가며 확인
    {
        for(int j=0;j<=i;j++)
        {
            // max(dp[i+1][j] , dp[i+1][j+1])
            if(dp[i+1][j] > dp[i+1][j+1]) 
                dp[i][j] = triangle[i][j]+dp[i+1][j];
            else
                dp[i][j] = triangle[i][j] + dp[i+1][j+1];
        }
    }

    answer = dp[0][0];
    return answer;
}
// 출처: 프로그래머스 코딩 테스트 연습, https://school.programmers.co.kr/learn/challenges
